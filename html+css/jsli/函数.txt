一，函数的概念
 将一段能实现特定功能的代码集合起来，方便以后重复使用的代码块，就是一个函数。
二，函数的声明
 1，基本函数（具名函数）
 必须使用关键字  function
 格式：
  function 函数名（）{  
             函数体；
    }
     函数名（）；
  2，字面量（直接量的形式，匿名函数）
  格式：
  var 变量=function（）{
       函数体
   } 
  函数名（）；
  3，用对象的方式声明(表示函数是一个对象)
  格式：
  var 变量=new Function（"参数1"，"参数1"，...."函数体"）
  例如：var sum=new Function("a","b","c","alert(a+b+c)")
         a=20;
         b=30;
         c=33;
         sum(a,b,c);
 三，函数的调用
  1，函数名（）；（基本函数，匿名函数给变量引用时可以用，以对象声明的方式也可以用）
  2，自调用（使用于匿名函数）
  格式：
A  （function （num）{             
         alert（num）
      }）（30）
B   （function （num）{             
         alert（num）
      }（30））
  3，通过事件方式调用
  格式：?
  <div class="box"  onclick="aa();"></div>
四，前两种函数声明的区别
 1，当函数名相同，会发生覆盖
 2，用基本函数声明的，会提前解析到内存中，可以在函数声明前调用。以字面量形式声明的函数，只有执行到变量赋值时才会把函数存到内存中，调用时只能放在赋值后才能调用。
 3，当有多个<spript></spript>时，按从上到下一块一块的执行。所以所有函数都声明完以后再调用。
五，函数的参数
  意义：可以灵活改变函数的最终效果，使函数表现的更丰富
  分类：
  1，形参:函数在声明时括号的参数，用来接收实参。（变量）
  2，实参：函数在调用时括号的参数，用来传递给形参的。（给变量赋的值）
六，参数的使用
  1，参数可以是任何的数据类型
  2，参数的个数:
  a，当形参与实参个数相同时，一一对应
  b，当实参个数小于形参个数时，多出了的形参会自动赋值为underfined
  c，当实参个数多于形参时，多出的实参如何访问？
           借助arguments对象

****************************************************
arguments对象，专门保存函数的参数信息
1，属性：
   a，length  指函数参数的个数
   b，【下标】下标从0开始，例如：arguments[2]访问第三个参数
   c，callee  返回整个函数体   例如：arguments.callee
****************************************************
七，函数的返回值（return）的作用
  1，可以停止并跳出函数，不会执行return后面的代码
  2，可以给函数返回运算后的结果
  3，可以有多个return，只有一个return语句会执行
  4，函数的返回值可以是任何的数据类型
  5，一个函数只能有一个返回值
    例如；

   function bb(a,b,c){
       return b,c,a;  //逗号的运算规则是从左到右进行赋值，会发生覆盖，只能保留最后一个值
    }
    return（bb(45,4,36)）;//
  八，Javascript的代码运行环境
   ||环境||：宿主环境（浏览器）
           执行环境：（执行决定作用域）
                         全局环境-->作用域为整个页面-->全局变量
                         函数环境-->作用域为函数内部-->局部变量
  九，||作用域||（一段代码的作用范围），规章制度的使用范围
  十，||全局变量||：在函数外声明的变量就是全局变量，还有个例外；（没有用var声明且赋值的变量也是全局变量）     【可以在页面的任何地方访问】
                  
        ||局部变量||：在函数内部声明的变量就是局部变量   【只能在函数内部访问】
                    
               优点：可以节省内存
  十一，||作用域链||
   函数有嵌套关系时，它们的作用域会形成一条链子，访问函数内部的变量时，先在自己的函数环境中找变量，如果找不到则跳出一层找，然后再次按照这个顺序执行。
   十二，预解析顺序
  a，按<script></script>块来执行，从上到下一个块一块的执行
  b，按代码的环境以及变量的作用域执行
  c，先将关键字解析到内存中，然后在按从上到下执行
   (3) a=40;
   (1)var a=30;  (4)
   (2)function demo(){
 
         }
  4,上面的<script>块执行完成后再执行下一个<script>块，再按b,c执行。
  十三，函数的类别
   1，函数的重载
      一个函数通过传入不同类型的参数或个数的不同，而有多种实现，每一种实现对应一个函数体
   2，回调函数
           把一个函数指针（函数名）作为另一个函数的参数时，作为参数的这个函数就是回调函数。
      形式：1，用函数指针（函数名）做参数；2，将整个函数做参数；
   3，递归函数
           在函数内部直接或间接调用自己（一个函数再次调用这个函数）。先一层一层往进提交，提交的结果如果满足条件，再一层一层的往出返回。
   4，闭包函数
         在函数内部再嵌套函数（一个函数a嵌套了一个函数b，当嵌套的函数被外部的一个变量引用时就形成了闭包）
         闭包的作用：a，可以在外部访问变量  b，可以将局部变量保存在内存中
         形式：
        function aa(){
           var i=10;//局部变量；
           function bb(){
              return ++i;
        }
        return  bb;
        }
        aa();//把bb函数拿出来
        var c=aa();//所以给bb声明了c
        alert(c());//输出bb
        alert(c());


一，数据类型的转换
    1，强制性
    2，隐式
二，内置顶层函数（强制性）   (Globle)
  概念：这些函数是Javascript（ECMAscript）已经定义好的数，我们不需知道它内部是如何实现的，只用知道怎么用就行了，这些函数可以在页面的任何地方调用
  1，escape();   编码
  2,unescape();   解码
  3,转换成数值类型
   A。Number();可以将任何数据类型转换为数值类型；
      a，对于布尔类型，true-->1   false-->0
      b,  对于undefined,转换为NaN（not a number）
      c,对于null,转换为0
      d,对于数值类型：还是本身
                var num=1200;//1200
                              23.45;//23.45
                              0123(八进制)//83
                     0000123//83  会忽略前导0
                        0x123（十六进制）//291
                     000x123 //报错
      e，对于字符串的类型：
     如果字符串中的值我规范的纯数字时，则转换为数值类型，如果字符串中出现了字母，则转换不成功（NaN）
                       ""====>0
    B，parseInt(参数1，参数2)；将字符串转换为数值类型
      1，只传一个参数时
          a：如果字符串是以空格，-，数字开头，后面有字母，转换时只转换到数字结束，如果有小数点，到小数点后结束
          b：如果字符串为空，为NaN；
          c：其他情况都为NaN
      2，传两个参数时
   第一参数，是表示数值类型的数据
   第二参数，是表示几进制的（2-32）
    C，parseFloat(参数)；将字符串转换为带小数的数值类型
   1，字符串中是规范的整数时，转换为本身
        "123"====>123
   2,"123.23.34"===>123.23
   3,"a12"===>NaN
   4,""或者"   "====>NaN
    D,转换为字符串类型
   a  String（参数）：将任何的数据类型转换为字符串
       规则：你传入什么值，都会转换为字符串
   b  对象.toString();(不是内置顶层函数)
      规则：调用格式：
          1，对象.toString()
          2，null和undefined  转换不成功，其他都可以
          3，数组
                    var str=[23,34,56]
                             str.toString()==>["23","34","56"]
  5,转换为布尔类型
   Boolean(参数);可以将任何类型的数据转换为布尔类型
            number   string  boolean  null  nudefined  NaN  
true       其他          其他       true     ---    ---            ---

false        0              ""          false   false   false      false

 6,isNaN(参数)：检测这个参数能否转换为数值类型
      如果转换成功，结果为false
      如果不能转换成功，结果为true
  7，eval（""）:将字符串转换为javascript代码

三，隐式类型
 var num1=34;
 var num2="34";
 alert(num1-num2);

















