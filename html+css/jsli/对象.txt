一，对象
  Javascript是基于对象的语言
      是用对象的语言开发出来的一种脚本语言
  Javascript的编程方式也是按对象的思想来编程的
二，对象的编程思想是什么？
  1，对象：一切皆对象（）
  2，属性与方法
   属性:描述事物的特征（值为初始类型时）
   方法：事物的一系列动作（值为函数时）
  3，类：Java有类这个概念  class
      Javascript没有类，所以它只能构造函数
      类就是一个抽象的对象
【类与对象的关系】
      类的具体化(实例化)就是一个对象
      对象的抽象就是类
      先有对象，才有类

二，对象的创建方法
  1，通过new关键词来创建
  格式：
         var object=new Object();
         Object();在Javascript里是一个空白的对象，里面的方法都得自己添加
  2，通过构造函数来创建
  格式：
      function aa(){}
      var obj2=new aa();
      alert(typeof obj2);
  3,通过json来创建
      var obj3={}
      alert(typeof obj3);

三，添加属性与方法
  1，构造函数
     A，声明一个对象以后赋值

******************************************************
 【函数里的this说明】：
    如果函数是普通函数，this指Window
    如果函数是构造函数，this指具体化的对象，谁new它就是指谁
*******************************************************
  2，json
    A.声明的同时赋值
    B,先声明后赋值
四，属性与方法的访问方式
  1，属性的访问方式
     a，格式：对象.属性名
     b，格式：对象["属性名"]
  2，方法的访问方式
     a，对象.方法名（）
     b,  对象["方法名"]()
五，销毁对象：给一个对象赋值null；
     垃圾回收机制：在JavaScript中，如果一个对象不再被引用，那么这个对象会被GC回收，如果两个对象互相引用，而不再被第三者
六，删除对象中的一个属性与方法
  【delete】
 例如1：（删除属性）
      alert(tv2.color);//长虹
      delete tv2.color;
      alert(tv2.color);//undefined

  例如2：（删除方法）
       delete tv2.play;
       alert(tv2.play);//报错
七，对象的遍历
   for in 只遍历对象的属性
   for(var i in obj){} 
   i:表示对象的属性
   obj[i]:表示对象的属性值 
八，变量在引用时的注意事项
  1，会覆盖：
     把一个对象给另一个变量引用时，更改对象里的属性，会发生覆盖
原因：给另一个变量后两者用的其实是同一个变量，所以会发生覆盖。
  2，不会覆盖：
     new出来的两个对象，更改其中一个对象的属性时，不会影响另一个对象，这样就不会发生覆盖。

一，对象的特性之封装
 封装：将对象的所有组成部分集合起来，尽可能隐藏其内部的细节，使其受到保护，只提供与外部发生关系的接口。
二，封装的方法：
      1，工厂函数
       例子：function tv(color,size){
   	  var tv=new Object();
   	  tv.color=color;
   	  tv.size=size;
   	  tv.look=function(){
   	  	  alert("可以看电视");
   	  }
   	  return tv;
       }
       var tv1=new tv("red","55英寸");
       alert(tv1.color);

      2，构造函数
        通过构造函数创建的对象，会将相同的属性或方法存储在堆中，造成内存的浪费。
      3，prototype
        JavaScript特有的，原型。（原型只能给构造函数添加，不能给new出来的对象添加）     优点：可以节省内存，可以将自己的属性和方法实现共享。
     格式：
           属性：tv.prototype.属性名="属性值"；
           方法：tv.prototype.属性名=function(){};
   例子： function tv(color,size){//color与size也表示对象的接口
    	  this.color=color;
    	  this.size=size;
    	  /*this.look=function(){
    	  	alert("可以看电视");
    	  }*/
          }
        tv.prototype.look=function(){  //这就是那个原型
    	  alert("可以看电视");
        }
       var tv2=new tv("blue","120英寸");
      alert(tv2.color);
      var tv3=new tv("yellow","120英寸");
      tv2.look();
      tv.look();


      4，混合模式（构造函数与原型一起使用，用的最多的一种）

三，对象的特性之继承
    继承：一个对象拥有另一个对象的方法与属性
       父类(基类):被继承的对象
       子类：继承的对象
四。继承的方式：
    1，prototype   
    2，call 
    3, apply
五，对象(object),构造函数(constructor),原型(prototype)
     对象是通过构造函数创建的
     原型只能给构造函数添加
     所以构造函数的原型上的方法与属性会继承给另一个构造函数，构造函数又会把方法与属性继承给new出来的对象
   它们的优先级：
        原型
        构造函数
        new出来的对象
  **************************************************
  原型只能给构造函数添加
  一个对象可以有无数个原型
  new出来的对象不能添加原型
  **************************************************
2，对象.方法.call(对象，参数1，参数2，.....)
3, 对象.方法.apply(对象，[参数1，参数2,...])
       如果apply中的对象省略了，this指向window
       如果apply中传入了对象，this就指向传入的这个对象
六，this指向谁
  1，在一个普通函数中，this指window
    function aa() {
       alert(this);
    }
   aa();//[object Window]
   2,在一个方法中，this指当前对象
     var ren={};
     function bb(){
        alert(this);
     }
   ren.fun=bb;
   ren.fun();  //[object Object]  [类型 什么对象]
************************************
     Object  基类 空白对象
     window   全局对象
************************************
3，在构造函数里，this指被创建的对象
     例子：
     function person(){
        this.name="";  //this 指向yaoming
     }
     var yaoming=new person();
     alert(yaoming.name);
    
4，在call方法里，this指括号里的对象
   
    var ren={};
    function bb (){
       alert(this);
   }
   ren.fun=bb;//对象的方法
   ren.fun();
   var aa={};
   ren.fun.call(aa);  //this指向aa

七，Object对象
   是一个基类，开发人员给用户提供的一种自定义对象的方式
    1，属性
    a，Object.constructor
     查看对象的构造函数
    b，Object.prototype
     是对对象的构造函数的原型的引用，可以给对象的构造函数添加原型
 2，方法
    a， 对象.toString();
    b,  eval();
    c,  检测对象的构造函数
    d，Instanceof  用来检测某个对象是否有构造函数
    例如：alert(arr instanceof Function);//false
     结果为true时表示是正确的
     结果为false时不是







































